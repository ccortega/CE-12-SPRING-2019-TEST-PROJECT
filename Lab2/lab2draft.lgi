41 2 0
38 1
11 444 132 471 34 0 1
25 114 402 221 306
20 246 312 305 293 0
in3
20 252 336 311 317 0
in2
20 258 360 317 341 0
in1
20 264 384 323 365 0
in0
8 108 252 157 203 1 1
20 228 228 287 209 0
getrnd
19 330 108 389 89 0
reg3
19 342 132 401 113 0
reg2
19 354 156 413 137 0
reg1
19 366 180 425 161 0
reg0
22 18 30 58 10 0 \NUL
Lab 2
22 18 54 171 34 0 \NUL
Last Name, First Name
22 18 78 66 58 0 \NUL
CruzID
11 708 132 735 34 0 1
11 630 132 657 34 0 0
22 588 30 742 10 0 \NUL
(signed) Decimal Score
22 24 330 90 310 0 \NUL
Gamepad
22 18 246 108 226 0 \NUL
New Problem
8 108 156 157 107 1 1
20 228 132 287 113 0
reset
5 174 156 223 107 0
22 18 132 101 112 0 \NUL
Reset Score
19 624 150 683 131 0
score3
19 630 174 689 155 0
score2
19 636 198 695 179 0
score1
19 642 222 701 203 0
score0
19 498 96 557 77 0
sgn6
19 504 120 563 101 0
sgn5
19 510 144 569 125 0
sgn4
19 516 168 575 149 0
sgn3
19 522 192 581 173 0
sgn2
19 528 216 587 197 0
sgn1
19 534 240 593 221 0
sgn0
11 720 426 747 328 0 1
19 618 402 677 383 0
ans3
19 630 426 689 407 0
ans2
19 636 450 695 431 0
ans1
19 648 474 707 455 0
ans0
22 390 30 530 10 0 \NUL
Score Register Value
22 678 324 779 304 0 \NUL
Correct Answer
22 12 444 96 424 0 \NUL
How to play:
22 12 516 392 496 0 \NUL
3. Press "New Problem" to generate a new set of numbers
22 12 540 434 520 0 \NUL
4. Guess the result of r0 + r1 (function = 0) or r0 - r1 (function = 1)
22 12 468 165 448 0 \NUL
1. Press "Reset Score"
22 12 588 238 568 0 \NUL
6. Repeat steps 2 - 5 until satiated
8 108 204 157 155 1 0
20 228 180 287 161 0
func
22 18 210 96 190 0 \NUL
0 => r0 + r1
8 108 300 157 251 1 1
20 228 276 287 257 0
update
22 18 276 109 256 0 \NUL
Update Score
22 12 564 421 544 0 \NUL
5. Press "Update Score" (+1 correct guess, - 1 incorrect guess)
22 18 192 92 172 0 \NUL
1 => r0 - r1
19 342 402 401 383 0
r0_3
19 348 426 407 407 0
r0_2
19 354 450 413 431 0
r0_1
19 360 474 419 455 0
r0_0
11 438 426 465 328 0 1
19 474 402 533 383 0
r1_3
19 480 426 539 407 0
r1_2
19 486 450 545 431 0
r1_1
19 492 474 551 455 0
r1_0
11 570 426 597 328 0 1
22 414 324 496 304 0 \NUL
Random # 0
22 546 324 628 304 0 \NUL
Random # 1
7 528 564 577 515 2 1
19 468 540 527 521 0
ovrflw
22 516 516 577 496 0 \NUL
Overflow
22 510 264 714 244 0 \NUL
max score implemented? Y / N
22 12 492 271 472 0 \NUL
2. Select function (0 = add, 1 = subtract)
22 18 174 77 154 0 \NUL
Function
8 660 564 709 515 1 0
22 666 510 707 490 0 \NUL
Cheat
20 726 534 785 515 0
cheat
22 576 594 792 574 0 \NUL
cheat switch implemented? Y / N
22 510 288 710 268 0 \NUL
min score implemented? Y / N
1 218 374 247 302
1 218 380 253 326
1 218 386 259 350
1 218 392 265 374
1 154 227 229 218
1 386 98 445 98
1 398 122 445 104
1 410 146 445 110
1 422 170 445 116
1 220 131 229 122
1 154 131 175 131
1 680 140 709 98
1 686 164 709 104
1 692 188 709 110
1 698 212 709 116
1 554 86 631 86
1 560 110 631 92
1 566 134 631 98
1 572 158 631 104
1 578 182 631 110
1 584 206 631 116
1 590 230 631 122
1 674 392 721 392
1 686 416 721 398
1 692 440 721 404
1 704 464 721 410
1 229 170 154 179
1 154 275 229 266
1 416 464 439 410
1 410 440 439 404
1 404 416 439 398
1 398 392 439 392
1 548 464 571 410
1 542 440 571 404
1 536 416 571 398
1 530 392 571 392
1 524 530 529 539
1 727 524 706 539
38 2
34 102 288 151 239 0 0
20 180 192 239 173 0
r0_0
20 186 216 245 197 0
r0_1
20 192 240 251 221 0
r0_2
20 198 264 257 245 0
r0_3
19 30 258 89 239 0
getrnd
34 102 438 151 389 0 0
20 180 342 239 323 0
r1_0
20 186 366 245 347 0
r1_1
20 192 390 251 371 0
r1_2
20 198 414 257 395 0
r1_3
19 30 408 89 389 0
getrnd
22 84 318 166 298 0 \NUL
Random # 0
22 84 468 166 448 0 \NUL
Random # 1
22 18 156 412 136 0 \NUL
random numbers (do not modify random number generators)
22 564 78 794 58 0 \NUL
placeholder senders and receivers
22 426 546 792 526 0 \NUL
these are only present so circuit simulates without error
22 492 570 759 550 0 \NUL
remove these once logic is implemented
22 18 30 58 10 0 \NUL
Lab 2
22 18 54 171 34 0 \NUL
Last Name, First Name
22 18 78 66 58 0 \NUL
CruzID
1 148 242 181 182
1 148 248 187 206
1 148 260 193 230
1 148 278 199 254
1 103 248 86 248
1 103 398 86 398
1 199 404 148 422
1 193 380 148 416
1 187 356 148 410
1 181 332 148 404
38 3
22 264 30 590 10 0 \NUL
Function Logic (either add or subtract Random #1)
22 18 30 58 10 0 \NUL
Lab 2
22 18 54 171 34 0 \NUL
Last Name, First Name
22 18 78 66 58 0 \NUL
CruzID
19 21 120 80 101 0
func
20 87 120 146 101 0
cin_0
35 99 210 148 161 0 0
19 21 182 80 163 0
func
19 21 208 80 189 0
r1_0
20 164 195 223 176 0
r1_0'
35 101 297 150 248 0 0
19 23 269 82 250 0
func
19 23 295 82 276 0
r1_1
35 101 297 150 248 0 0
19 23 269 82 250 0
func
19 23 295 82 276 0
r1_1
35 95 391 144 342 0 0
19 17 363 76 344 0
func
19 17 389 76 370 0
r1_2
20 160 376 219 357 0
r1_2'
35 97 488 146 439 0 0
19 19 460 78 441 0
func
19 19 486 78 467 0
r1_3
20 162 473 221 454 0
r1_3'
22 246 59 635 39 0 \NUL
if function == 1 implements the following to make subtractor
22 181 119 350 99 0 \NUL
sets carry in for LSB to 1 
22 321 322 647 302 0 \NUL
all bits inverted (0-3) as they appear top to bottom
22 102 545 691 525 0 \NUL
this boils down to the algorithim we learned in class for finding the additive inverse in 2SC
20 173 283 232 264 0
r1_1'
1 77 110 88 110
1 77 172 100 171
1 77 198 100 199
1 145 185 165 185
1 79 259 102 258
1 79 285 102 286
1 73 353 96 352
1 73 379 96 380
1 141 366 161 366
1 75 450 98 449
1 75 476 98 477
1 143 463 163 463
1 147 272 174 273
38 4
22 324 30 510 10 0 \NUL
4-bit Random Number Adder
22 18 30 58 10 0 \NUL
Lab 2
22 18 54 171 34 0 \NUL
Last Name, First Name
22 18 78 66 58 0 \NUL
CruzID
19 42 114 101 95 0
r0_0
19 42 143 101 124 0
r1_0'
19 169 183 228 164 0
cin_0
35 105 144 154 95 0 0
35 236 184 285 135 0 0
3 221 252 270 203 0 0
3 99 221 148 172 0 0
4 273 232 322 183 0 0
20 328 197 387 178 0
cout_0
20 287 156 346 137 0
s_0
20 162 128 221 109 0
wire_0
19 168 156 227 137 0
wire_0
19 151 222 210 203 0
r0_0
19 151 251 210 232 0
r1_0'
19 35 221 94 202 0
cin_0
19 38 192 97 173 0
wire_0
22 124 174 155 154 0 \NUL
LSB
19 429 127 488 108 0
r0_1
19 429 156 488 137 0
r1_1'
19 556 196 615 177 0
cout_0
35 492 157 541 108 0 0
35 623 197 672 148 0 0
3 608 265 657 216 0 0
3 486 234 535 185 0 0
4 660 245 709 196 0 0
20 715 210 774 191 0
cout_1
20 674 169 733 150 0
s_1
20 549 141 608 122 0
wire_1
19 555 169 614 150 0
wire_1
19 538 235 597 216 0
r0_1
19 538 264 597 245 0
r1_1'
19 422 234 481 215 0
cout_0
19 425 205 484 186 0
wire_1
22 506 185 544 165 0 \NUL
2ndB
19 30 313 89 294 0
r0_2
19 30 342 89 323 0
r1_2'
19 157 382 216 363 0
cout_1
35 93 343 142 294 0 0
35 224 383 273 334 0 0
3 209 451 258 402 0 0
3 87 420 136 371 0 0
4 261 431 310 382 0 0
20 316 396 375 377 0
cout_2
20 275 355 334 336 0
s_2
20 150 327 209 308 0
wire_2
19 156 355 215 336 0
wire_2
19 139 421 198 402 0
r0_2
19 139 450 198 431 0
r1_2'
19 23 420 82 401 0
cout_1
19 26 391 85 372 0
wire_2
22 110 373 145 353 0 \NUL
3rdB
19 428 318 487 299 0
r0_3
19 428 347 487 328 0
r1_3'
19 555 387 614 368 0
cout_2
35 491 348 540 299 0 0
35 622 388 671 339 0 0
3 607 456 656 407 0 0
3 485 425 534 376 0 0
4 674 435 723 386 0 0
20 735 416 794 397 0
cout_3
20 673 360 732 341 0
s_3
20 548 332 607 313 0
wire_3
19 554 360 613 341 0
wire_3
19 537 426 596 407 0
r0_3
19 537 455 596 436 0
r1_3'
19 421 425 480 406 0
cout_2
19 424 396 483 377 0
wire_3
22 508 378 543 358 0 \NUL
MSB
22 166 529 660 509 0 \NUL
ripple carry adder that adds r1'   (additive inverse of r1) to r0  if function ==1
1 98 104 106 105
1 98 133 106 133
1 225 173 237 173
1 163 118 151 119
1 224 146 237 145
1 207 212 222 213
1 207 241 222 241
1 267 227 274 221
1 145 196 274 193
1 91 211 100 210
1 94 182 100 182
1 282 159 288 146
1 329 187 319 207
1 485 117 493 118
1 485 146 493 146
1 612 186 624 186
1 550 131 538 132
1 611 159 624 158
1 594 225 609 226
1 594 254 609 254
1 654 240 661 234
1 532 209 661 206
1 478 224 487 223
1 481 195 487 195
1 669 172 675 159
1 716 200 706 220
1 86 303 94 304
1 86 332 94 332
1 213 372 225 372
1 151 317 139 318
1 212 345 225 344
1 195 411 210 412
1 195 440 210 440
1 255 426 262 420
1 133 395 262 392
1 79 410 88 409
1 82 381 88 381
1 270 358 276 345
1 317 386 307 406
1 484 308 492 309
1 484 337 492 337
1 611 377 623 377
1 549 322 537 323
1 610 350 623 349
1 593 416 608 417
1 593 445 608 445
1 477 415 486 414
1 480 386 486 386
1 668 363 674 350
1 531 400 675 396
1 653 431 675 424
1 720 410 736 406
38 5
22 336 30 436 10 0 \NUL
Overflow Logic
22 276 54 566 34 0 \NUL
logic to determine if computation overflowed
22 18 30 58 10 0 \NUL
Lab 2
22 18 54 171 34 0 \NUL
Last Name, First Name
22 18 78 66 58 0 \NUL
CruzID
35 127 203 176 154 0 0
20 189 187 248 168 0
ovrflw
19 32 174 91 155 0
cout_2
19 33 202 92 183 0
cout_3
22 52 480 751 460 0 \NUL
overflow occurs when cout_3 != cout_2 so the XOR gate will == 1 when this is true turning on the ovrflw LED
1 173 178 190 177
1 88 164 128 164
1 89 192 128 192
38 6
22 342 30 453 10 0 \NUL
4-bit Comparator
22 18 30 58 10 0 \NUL
Lab 2
22 18 54 171 34 0 \NUL
Last Name, First Name
22 18 78 66 58 0 \NUL
CruzID
19 35 339 94 320 0
in3
19 38 275 97 256 0
in2
19 34 208 93 189 0
in1
19 35 146 94 127 0
in0
19 34 368 93 349 0
s_3
19 37 303 96 284 0
s_2
19 36 234 95 215 0
s_1
19 33 177 92 158 0
s_0
35 116 368 165 319 0 1
22 59 539 729 519 0 \NUL
for two bits an XNOR will ==1 if both inputs equal each other hence I use them to compare each sum bit
35 114 305 163 256 0 1
35 117 237 166 188 0 1
35 116 177 165 128 0 1
3 234 233 283 184 2 1
20 328 218 387 199 0
select
22 150 575 624 555 0 \NUL
then NAND gate compares and output ==1 if user inputs incorrect answer
22 413 296 560 276 0 \NUL
select == 1 if incorrect
1 91 329 117 329
1 90 358 117 357
1 115 294 93 293
1 94 265 115 266
1 90 198 118 198
1 92 224 118 226
1 91 136 117 138
1 89 167 117 166
1 162 152 235 194
1 163 212 235 203
1 160 280 235 213
1 235 222 162 343
1 280 208 329 208
38 7
22 342 30 459 10 0 \NUL
4-bit Multiplexors
22 18 30 58 10 0 \NUL
Lab 2
22 18 54 171 34 0 \NUL
Last Name, First Name
22 18 78 66 58 0 \NUL
CruzID
19 60 287 119 268 0
select
19 58 225 117 206 0
select
20 145 342 204 323 0
A0
20 143 288 202 269 0
A1
20 135 226 194 207 0
A2
20 136 171 195 152 0
A3
19 57 171 116 152 0
select
15 58 357 107 308
22 222 466 728 446 0 \NUL
If incorrect ouputs -1 in 4 bit 2SC otherwisw outputs 1 as a 4 bit 2SC number A
22 446 505 575 485 0 \NUL
with A3 as the MSB
22 226 232 361 212 0 \NUL
select == 0 if correct
22 228 272 375 252 0 \NUL
select == 1 if incorrect
22 271 113 522 93 0 \NUL
I didnt use multiplexors, but it works :/
1 116 277 144 278
1 114 215 136 216
1 113 161 137 161
1 104 332 146 332
38 8
22 342 30 456 10 0 \NUL
4-bit Score Adder
22 18 30 58 10 0 \NUL
Lab 2
22 18 54 171 34 0 \NUL
Last Name, First Name
22 18 78 66 58 0 \NUL
CruzID
19 42 114 101 95 0
A0
19 42 143 101 124 0
reg0
19 169 183 228 164 0
ground
35 105 144 154 95 0 0
35 236 184 285 135 0 0
3 221 252 270 203 0 0
3 99 221 148 172 0 0
4 273 232 322 183 0 0
20 328 197 387 178 0
cout0
20 287 156 346 137 0
s0
20 162 128 221 109 0
wire0
19 168 156 227 137 0
wire0
19 151 222 210 203 0
A0
19 151 251 210 232 0
reg0
19 35 221 94 202 0
ground
19 38 192 97 173 0
wire_0
22 124 174 155 154 0 \NUL
LSB
19 429 127 488 108 0
A1
19 429 156 488 137 0
reg1
19 556 198 615 179 0
cout0
35 492 157 541 108 0 0
35 623 197 672 148 0 0
3 608 265 657 216 0 0
3 486 234 535 185 0 0
4 660 245 709 196 0 0
20 715 210 774 191 0
cout1
20 674 169 733 150 0
s1
20 549 141 608 122 0
wire1
19 555 169 614 150 0
wire1
19 538 235 597 216 0
A1
19 538 264 597 245 0
reg1
19 422 234 481 215 0
cout0
19 425 205 484 186 0
wire1
22 506 185 544 165 0 \NUL
2ndB
19 30 313 89 294 0
A2
19 30 342 89 323 0
reg2
19 157 382 216 363 0
cout1
35 93 343 142 294 0 0
35 224 383 273 334 0 0
3 209 451 258 402 0 0
3 87 420 136 371 0 0
4 261 431 310 382 0 0
20 316 396 375 377 0
cout2
20 275 355 334 336 0
s2
20 150 327 209 308 0
wire2
19 156 355 215 336 0
wire2
19 139 421 198 402 0
A2
19 139 450 198 431 0
reg2
19 23 420 82 401 0
cout1
19 26 391 85 372 0
wire2
22 110 373 145 353 0 \NUL
3rdB
19 428 318 487 299 0
A3
19 428 347 487 328 0
reg3
19 555 387 614 368 0
cout2
35 491 348 540 299 0 0
35 622 388 671 339 0 0
3 607 456 656 407 0 0
3 485 425 534 376 0 0
4 674 435 723 386 0 0
20 732 419 791 400 0
cout3
20 673 360 732 341 0
s3
20 548 332 607 313 0
wire3
19 554 360 613 341 0
wire3
19 537 426 596 407 0
A3
19 537 455 596 436 0
reg3
19 421 425 480 406 0
cout2
19 424 396 483 377 0
wire3
22 508 378 543 358 0 \NUL
MSB
14 289 553 338 504
20 384 507 443 488 0
ground
19 710 469 769 450 0
cout3
22 211 290 515 270 0 \NUL
4 bit ripple carry adder made out of full adders
22 398 545 563 525 0 \NUL
sets carry in for LSB to 0
1 98 104 106 105
1 98 133 106 133
1 225 173 237 173
1 163 118 151 119
1 224 146 237 145
1 207 212 222 213
1 207 241 222 241
1 267 227 274 221
1 145 196 274 193
1 91 211 100 210
1 94 182 100 182
1 282 159 288 146
1 329 187 319 207
1 485 117 493 118
1 485 146 493 146
1 612 188 624 186
1 550 131 538 132
1 611 159 624 158
1 594 225 609 226
1 594 254 609 254
1 654 240 661 234
1 532 209 661 206
1 478 224 487 223
1 481 195 487 195
1 669 172 675 159
1 716 200 706 220
1 86 303 94 304
1 86 332 94 332
1 213 372 225 372
1 151 317 139 318
1 212 345 225 344
1 195 411 210 412
1 195 440 210 440
1 255 426 262 420
1 133 395 262 392
1 79 410 88 409
1 82 381 88 381
1 270 358 276 345
1 317 386 307 406
1 484 308 492 309
1 484 337 492 337
1 611 377 623 377
1 549 322 537 323
1 610 350 623 349
1 593 416 608 417
1 593 445 608 445
1 477 415 486 414
1 480 386 486 386
1 668 363 674 350
1 531 400 675 396
1 653 431 675 424
1 720 410 733 409
1 335 528 385 497
38 9
22 342 30 474 10 0 \NUL
4-bit Score Register
22 18 30 58 10 0 \NUL
Lab 2
22 18 54 171 34 0 \NUL
Last Name, First Name
22 18 78 66 58 0 \NUL
CruzID
24 95 221 144 149 1 1 1
24 650 360 699 288 1 1 1
24 204 384 253 312 1 1 1
24 384 497 433 425 1 1 1
19 9 298 68 279 0
reset
19 573 345 632 326 0
update
19 89 427 148 408 0
reset
19 311 484 370 465 0
update
19 227 553 286 534 0
reset
19 129 371 188 352 0
update
19 556 438 615 419 0
reset
19 19 209 78 190 0
update
19 20 179 79 160 0
s0
19 129 341 188 322 0
s1
19 308 454 367 435 0
s2
19 573 316 632 297 0
s3
20 183 169 242 150 0
reg0
20 277 304 336 285 0
reg1
20 469 417 528 398 0
reg2
20 715 290 774 271 0
reg3
20 557 114 616 95 0
high
19 581 265 640 246 0
high
19 296 404 355 385 0
high
19 127 299 186 280 0
high
19 13 131 72 112 0
high
15 443 106 492 57
22 169 207 591 187 0 \NUL
update score button acts as clock and reset score button to reset
22 263 236 583 216 0 \NUL
inputs from the score adder and outputs back out
1 629 335 651 326
1 367 474 385 463
1 185 361 205 350
1 75 199 96 187
1 629 306 651 308
1 364 444 385 445
1 185 331 205 332
1 76 169 96 169
1 696 308 716 280
1 430 445 470 407
1 250 332 278 294
1 141 169 184 159
1 65 288 109 217
1 145 417 218 380
1 283 543 398 493
1 612 428 664 356
1 637 255 664 290
1 352 394 398 427
1 218 314 183 289
1 109 151 69 121
1 489 81 558 104
38 10
22 342 30 435 10 0 \NUL
Display Logic
22 18 30 58 10 0 \NUL
Lab 2
22 18 54 171 34 0 \NUL
Last Name, First Name
22 18 78 66 58 0 \NUL
CruzID
22 228 53 549 33 0 \NUL
correct answer display with cheat switch enabled
19 35 372 94 353 0
s_3
19 37 303 96 284 0
s_2
19 36 234 95 215 0
s_1
19 36 163 95 144 0
s_0
19 36 137 95 118 0
cheat
19 33 209 92 190 0
cheat
19 37 279 96 260 0
cheat
19 35 347 94 328 0
cheat
3 121 168 170 119 0 0
3 125 236 174 187 0 0
3 124 306 173 257 0 0
3 116 373 165 324 0 0
20 222 133 281 114 0
ans0
20 224 209 283 190 0
ans1
20 223 278 282 259 0
ans2
20 223 347 282 328 0
ans3
22 174 483 659 463 0 \NUL
this implements the cheat switch with the idnentity law and dominance law
22 176 518 650 498 0 \NUL
if cheat ==1 lets the correct answer pass through if cheat ==   0 outputs 0
1 92 127 122 129
1 92 153 122 157
1 89 199 126 197
1 92 224 126 225
1 93 269 125 267
1 93 293 125 295
1 91 337 117 334
1 91 362 117 362
1 167 143 223 123
1 171 211 225 199
1 170 281 224 268
1 162 348 224 337
38 11
22 18 30 58 10 0 \NUL
Lab 2
22 18 54 171 34 0 \NUL
Last Name, First Name
22 18 78 66 58 0 \NUL
CruzID
22 342 30 435 10 0 \NUL
Display Logic
22 339 56 434 36 0 \NUL
decimal score
20 95 117 154 98 0
sgn6
20 95 135 154 116 0
sgn5
20 95 153 154 134 0
sgn4
20 99 262 158 243 0
sgn3
20 99 187 158 168 0
sgn2
20 99 205 158 186 0
sgn1
20 99 223 158 204 0
sgn0
19 19 111 78 92 0
ground
19 18 132 77 113 0
ground
19 18 154 77 135 0
ground
19 19 205 78 186 0
ground
19 19 184 78 165 0
ground
19 19 228 78 209 0
ground
19 20 262 79 243 0
reg3
22 60 298 199 278 0 \NUL
controls sign, if MSB
22 15 325 258 305 0 \NUL
 in the register output ==1 it turns on 
20 574 131 633 112 0
score3
19 350 104 409 85 0
reg3
19 308 158 367 139 0
reg2
19 302 201 361 182 0
reg1
19 331 243 390 224 0
reg0
3 497 176 546 127 2 0
22 484 367 631 347 0 \NUL
controls MSB of score
5 388 174 437 125 0
5 379 217 428 168 0
5 406 258 455 209 0
1 96 107 75 101
1 96 125 74 122
1 96 143 74 144
1 100 177 75 174
1 100 195 75 195
1 100 213 75 218
1 100 252 76 252
1 543 151 575 121
1 406 94 498 137
1 364 148 389 149
1 358 191 380 192
1 387 233 407 233
1 434 149 498 146
1 498 156 425 192
1 452 233 498 165
38 12
22 18 30 58 10 0 \NUL
Lab 2
22 18 54 171 34 0 \NUL
Last Name, First Name
22 18 78 66 58 0 \NUL
CruzID
19 128 99 187 80 0
reg3
19 8 123 67 104 0
reg2
19 8 163 67 144 0
reg1
19 116 196 175 177 0
reg0
19 237 468 296 449 0
reg3
19 191 515 250 496 0
reg2
19 163 551 222 532 0
reg1
19 139 584 198 565 0
reg0
5 78 141 127 92 0
5 77 180 126 131 0
3 200 162 249 113 2 0
3 306 563 355 514 2 0
19 115 220 174 201 0
reg3
19 26 260 85 241 0
reg2
19 77 289 136 270 0
reg1
19 34 326 93 307 0
reg0
3 181 298 230 249 2 0
5 103 274 152 225 0
5 103 343 152 294 0
19 86 364 145 345 0
reg3
19 30 400 89 381 0
reg2
19 85 436 144 417 0
reg1
19 83 471 142 452 0
reg0
3 193 412 242 363 2 0
5 97 416 146 367 0
5 233 565 282 516 0
5 214 594 263 545 0
4 393 251 442 202 2 0
20 496 234 555 215 0
con_0
22 342 30 435 10 0 \NUL
Display Logic
22 339 56 434 36 0 \NUL
decimal score
22 513 361 670 341 0 \NUL
controls 3rd bit of score
1 79 116 64 113
1 78 155 64 153
1 201 123 184 89
1 201 132 124 116
1 201 142 123 155
1 201 151 172 186
1 104 249 82 250
1 104 318 90 316
1 182 259 171 210
1 182 268 149 249
1 182 278 133 279
1 182 287 149 318
1 98 391 86 390
1 194 373 142 354
1 194 382 143 391
1 194 392 141 426
1 194 401 139 461
1 234 540 219 541
1 215 569 195 574
1 307 543 279 540
1 307 552 260 569
1 307 533 247 505
1 307 524 293 458
1 394 212 246 137
1 394 221 227 273
1 394 231 239 387
1 394 240 352 538
1 497 224 439 226
38 13
22 18 30 58 10 0 \NUL
Lab 2
22 18 54 171 34 0 \NUL
Last Name, First Name
22 18 78 66 58 0 \NUL
CruzID
20 650 244 709 225 0
score2
22 342 30 435 10 0 \NUL
Display Logic
22 339 56 434 36 0 \NUL
decimal score
19 21 114 80 95 0
reg3
19 78 146 137 127 0
reg2
19 16 176 75 157 0
reg1
19 11 215 70 196 0
reg0
3 222 172 271 123 2 0
5 89 129 138 80 0
5 93 192 142 143 0
5 92 231 141 182 0
19 72 251 131 232 0
reg3
19 16 286 75 267 0
reg2
19 18 318 77 299 0
reg1
19 129 337 188 318 0
reg0
3 210 300 259 251 2 0
5 139 267 188 218 0
5 89 329 138 280 0
19 40 380 99 361 0
reg3
19 50 415 109 396 0
reg2
19 28 442 87 423 0
reg1
19 41 471 100 452 0
reg0
3 200 445 249 396 2 0
5 145 403 194 354 0
5 140 484 189 435 0
19 115 503 174 484 0
reg3
19 116 529 175 510 0
reg2
19 115 559 174 540 0
reg1
19 114 586 173 567 0
reg0
3 269 550 318 501 2 0
5 192 518 241 469 0
4 370 294 419 245 2 0
4 575 325 624 276 0 0
19 422 349 481 330 0
con_0
22 527 400 684 380 0 \NUL
controls 3rd bit of score
1 90 104 77 104
1 94 167 72 166
1 93 206 67 205
1 223 133 135 104
1 223 142 134 136
1 223 152 139 167
1 223 161 138 206
1 128 241 140 242
1 90 304 74 308
1 211 261 185 242
1 211 270 72 276
1 211 280 135 304
1 211 289 185 327
1 146 378 96 370
1 141 459 97 461
1 201 406 191 378
1 201 415 106 405
1 201 425 84 432
1 201 434 186 459
1 193 493 171 493
1 270 511 238 493
1 270 520 172 519
1 171 549 270 530
1 170 576 270 539
1 371 255 268 147
1 371 264 256 275
1 371 274 246 420
1 315 525 371 283
1 576 286 416 269
1 576 314 478 339
1 651 234 621 300
38 14
22 18 30 58 10 0 \NUL
Lab 2
22 18 54 171 34 0 \NUL
Last Name, First Name
22 18 78 66 58 0 \NUL
CruzID
22 342 30 435 10 0 \NUL
Display Logic
22 339 56 434 36 0 \NUL
decimal score
19 27 482 86 463 0
reg3
19 28 508 87 489 0
reg2
19 27 538 86 519 0
reg1
19 26 565 85 546 0
reg0
3 197 529 246 480 2 0
19 71 362 130 343 0
reg3
19 29 396 88 377 0
reg2
19 24 429 83 410 0
reg1
19 109 457 168 438 0
reg0
3 188 439 237 390 2 0
19 128 99 187 80 0
reg3
19 8 123 67 104 0
reg2
19 8 163 67 144 0
reg1
19 116 196 175 177 0
reg0
5 78 141 127 92 0
5 77 180 126 131 0
3 200 162 249 113 2 0
19 115 220 174 201 0
reg3
19 26 260 85 241 0
reg2
19 77 289 136 270 0
reg1
19 34 326 93 307 0
reg0
3 181 298 230 249 2 0
5 103 274 152 225 0
5 103 343 152 294 0
5 98 437 147 388 0
5 126 586 175 537 0
4 383 279 432 230 2 0
20 479 264 538 245 0
con_1
22 527 400 687 380 0 \NUL
controls 2nd bit of score
1 79 116 64 113
1 78 155 64 153
1 201 123 184 89
1 201 132 124 116
1 201 142 123 155
1 201 151 172 186
1 104 249 82 250
1 104 318 90 316
1 182 259 171 210
1 182 268 149 249
1 182 278 133 279
1 182 287 149 318
1 99 412 80 419
1 189 419 144 412
1 189 409 85 386
1 127 352 189 400
1 165 447 189 428
1 82 555 127 561
1 198 518 172 561
1 198 509 83 528
1 198 499 84 498
1 83 472 198 490
1 384 240 246 137
1 384 249 227 273
1 384 259 234 414
1 243 504 384 268
1 480 254 429 254
38 15
22 18 30 58 10 0 \NUL
Lab 2
22 18 54 171 34 0 \NUL
Last Name, First Name
22 18 78 66 58 0 \NUL
CruzID
22 342 30 435 10 0 \NUL
Display Logic
22 339 56 434 36 0 \NUL
decimal score
20 718 181 777 162 0
score1
19 12 120 71 101 0
reg3
19 13 146 72 127 0
reg2
19 74 189 133 170 0
reg1
19 25 219 84 200 0
reg0
3 210 178 259 129 2 0
5 123 131 172 82 0
5 126 171 175 122 0
5 125 231 174 182 0
19 49 255 108 236 0
reg3
19 20 286 79 267 0
reg2
19 15 324 74 305 0
reg1
19 27 359 86 340 0
reg0
3 185 318 234 269 2 0
5 124 275 173 226 0
5 100 309 149 260 0
19 28 393 87 374 0
reg3
19 38 428 97 409 0
reg2
19 16 455 75 436 0
reg1
19 29 484 88 465 0
reg0
3 188 458 237 409 2 0
5 133 416 182 367 0
5 128 497 177 448 0
19 194 510 253 491 0
reg3
19 195 536 254 517 0
reg2
19 194 566 253 547 0
reg1
19 193 593 252 574 0
reg0
3 348 557 397 508 2 0
5 271 525 320 476 0
4 493 304 542 255 2 0
4 642 282 691 233 0 0
19 545 333 604 314 0
con_1
22 527 400 687 380 0 \NUL
controls 2nd bit of score
1 124 106 68 110
1 127 146 69 136
1 126 206 81 209
1 211 139 169 106
1 211 148 172 146
1 211 158 130 179
1 211 167 171 206
1 125 250 105 245
1 101 284 76 276
1 186 279 170 250
1 186 288 146 284
1 186 298 71 314
1 186 307 83 349
1 134 391 84 383
1 129 472 85 474
1 189 419 179 391
1 189 428 94 418
1 189 438 72 445
1 189 447 174 472
1 349 518 317 500
1 349 527 251 526
1 250 556 349 537
1 249 583 349 546
1 272 500 250 500
1 494 265 256 153
1 494 274 231 293
1 494 284 234 433
1 494 293 394 532
1 643 243 539 279
1 643 271 601 323
1 688 257 719 171
38 16
20 149 175 208 156 0
score0
22 18 30 58 10 0 \NUL
Lab 2
22 18 54 171 34 0 \NUL
Last Name, First Name
22 18 78 66 58 0 \NUL
CruzID
22 342 30 435 10 0 \NUL
Display Logic
22 339 56 434 36 0 \NUL
decimal score
19 64 175 123 156 0
reg0
22 63 247 206 227 0 \NUL
controls LSB of score
22 55 320 519 300 0 \NUL
makes sense they are the saame since this just says if its even or odd
1 150 165 120 165
39 16777215
47 0
40 1 6 6
50 800 600
51 0 100
30
System
16
700
0
0
0
0
0
34
